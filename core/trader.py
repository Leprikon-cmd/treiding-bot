# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π Trader —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–∫–∞–∑–æ–≤

from utils.logger import file_logger, console_logger
import MetaTrader5 as mt5
from core.mt5_interface import send_order, close_order
from config.settings import MIN_STOP_POINTS, STRATEGY_ALLOCATION
import os
import csv
from datetime import datetime

STRATEGY_ICONS = {
    "EMARSIVolumeStrategy": "üï∞Ô∏è",
    "PriceActionMAStrategy": "‚ö°"
}

def log_cycle_header():
    print(f"\nüîÅ –ù–æ–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

class Trader:
    def __init__(self, symbol, strategy):
        self.symbol = symbol
        self.strategy = strategy
        self.strategy_name = self.strategy.__class__.__name__
        self.tp = MIN_STOP_POINTS.get(symbol, 20)
        self.sl = MIN_STOP_POINTS.get(symbol, 20)
        self.log_path = f"logs/{self.strategy_name}_{self.symbol}.csv"
        self._prepare_log()

    def _prepare_log(self):
        os.makedirs("logs", exist_ok=True)
        if not os.path.isfile(self.log_path):
            with open(self.log_path, mode="w", newline="") as file:
                writer = csv.writer(file)
                writer.writerow(["timestamp", "action", "symbol", "price", "lot", "result"])

    def _log_trade(self, action, price, lot, result):
        with open(self.log_path, mode="a", newline="") as file:
            writer = csv.writer(file)
            writer.writerow([datetime.now().isoformat(), action, self.symbol, price, lot, result])

    def run(self):
        emoji = STRATEGY_ICONS.get(self.strategy_name, "üìà")

        rates = self.strategy.get_rates()
        if rates is None:
            print(f"{emoji} {self.symbol} ‚Äî ‚ö†Ô∏è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        symbol_info = mt5.symbol_info(self.symbol)
        if not symbol_info or symbol_info.trade_mode != mt5.SYMBOL_TRADE_MODE_FULL:
            print(f"{emoji} {self.symbol} ‚Äî ‚ö†Ô∏è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
            return

        spread = symbol_info.ask - symbol_info.bid
        if spread > symbol_info.point * 200:  # –¥–æ–ø—É—Å—Ç–∏–º –º–∞–∫—Å–∏–º—É–º 20 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –º–∞–∂–æ—Ä–æ–≤
            print(f"{emoji} {self.symbol} ‚Äî ‚ö†Ô∏è —Å–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π")
            return

        positions = mt5.positions_get(symbol=self.symbol)
        current_position = None
        if positions:
            for pos in positions:
                if self.strategy_name in pos.comment:
                    current_position = pos
                    break

        if current_position:
            print(f"{emoji} {self.symbol} ‚Äî üü¢ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞")
            self.check_and_close_position(current_position)
        else:
            signal = self.strategy.check_entry_signal(rates)
            if signal:
                print(f"{emoji} {self.symbol} ‚Äî ‚úÖ {signal.upper()}")
                self._try_open_order(signal)
            else:
                print(f"{emoji} {self.symbol} ‚Äî ‚ùå ‚õî")

    def _try_open_order(self, signal):
        tick = mt5.symbol_info_tick(self.symbol)
        if tick is None:
            print(f"‚ùå {self.symbol}: –æ—à–∏–±–∫–∞ —Ç–∏–∫–∞")
            return

        price = tick.ask if signal == 'buy' else tick.bid
        account_info = mt5.account_info()
        total_equity = account_info.equity if account_info else 40000
        allocation_percent = STRATEGY_ALLOCATION.get(self.strategy_name, 0.25)
        strategy_budget = total_equity * allocation_percent

        lot = self.strategy.calculate_lot(price, self.sl, strategy_budget)
        print(f"üîé {self.symbol}: –±—é–¥–∂–µ—Ç={strategy_budget:.2f}, SL={self.sl}, –ª–æ—Ç={lot}")

        if lot <= 0:
            print(f"‚ö†Ô∏è {self.symbol}: –õ–æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return

        print(f"üì§ {self.symbol}: –æ—Ç–∫—Ä—ã—Ç–∏–µ {signal.upper()} @ {price:.5f}, –ª–æ—Ç {lot}")

        result = send_order(
            self.symbol,
            lot,
            mt5.ORDER_TYPE_BUY if signal == 'buy' else mt5.ORDER_TYPE_SELL,
            price,
            sl_points=self.sl,
            tp_points=self.tp,
            comment=f"{self.strategy_name}_entry"
        )

        if result:
            print(f"‚úÖ {self.symbol}: {signal.upper()} –æ—Ç–∫—Ä—ã—Ç–æ (lot {lot})")
            self._log_trade("entry", price, lot, "success")
        else:
            print(f"‚ö†Ô∏è {self.symbol}: –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ({signal.upper()})")
            self._log_trade("entry", price, lot, "fail")

    def check_and_close_position(self, position):
        rates = self.strategy.get_rates()
        if rates is None:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—Ö–æ–¥–∞ {self.symbol}")
            return

        if self.strategy.check_exit_signal(rates):
            self.close_position(position)

    def close_position(self, position):
        price = mt5.symbol_info_tick(self.symbol)
        if price is None:
            file_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è {self.symbol}")
            return

        current_price = price.ask if position.type == mt5.ORDER_TYPE_BUY else price.bid
        result = close_order(position)
        if result:
            print(f"‚úÖ {self.symbol}: –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            self._log_trade("exit", current_price, position.volume, "success")
        else:
            print(f"‚ùå {self.symbol}: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è")
            self._log_trade("exit", current_price, position.volume, "fail")
